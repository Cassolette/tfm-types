debug.disableEventLog(activate)
Deactivates the events log.
  activate (Boolean) whether it should be active (default true)

debug.getCurrentThreadName()
Get current lua thread name.

system.bindKeyboard(playerName, keyCode, down, activate)
Listens to the player's keyboard events.
  playerName (String) the player you want to listen keyboard events from
  keyCode (Int) the code of the key you want to listen
    - to accurately listen for player movement (both arrows and wasd/zqsd keys), you can use 0 (left), 1 (up), 2 (right) or 3 (down)
    - regular AS3 keycodes can be found on http://help.adobe.com/fr_FR/FlashPlatform/reference/actionscript/3/flash/ui/Keyboard.html
  down (Boolean) whether it should listen for the press event, or the release one
  activate (Boolean) whether it should be active (default true)

system.bindMouse(playerName, active)
Listens to a player's mouse events.
  playerName (String) the player you want to listen mouse events from
  active (Boolean) whether it should be active (default true)

system.disableChatCommandDisplay(command, hide)
Prevents a module command (commands starting with « ! ») to be displayed in the room. If the supplied command is nil, the parameter will apply to all the commands.
  command (String) the command (without the initial « ! ») to hide (default nil)
  hide (Boolean) whether the command should be hided (default true)

system.exit()
Deactivates the lua script running.

system.giveEventGift(playerName, giftCode)
Gives an event reward to the targeted player.
  playerName (String) the player to give the gift to
  giftCode (String) the gift identifier (given by an admin)

system.loadFile(fileNumber)
Requests the loading of a data file. The event eventFileLoaded is triggered when the file gets loaded.
  fileNumber (Int) the identifier of the file to load (default 0)
Returns (Boolean) whether the loading got started

system.loadPlayerData(playerName)
Requests the loading of the player's data for this module. The event eventPlayerDataLoaded is triggered when the player data gets loaded.
  playerName (String) the player about whom you want to get the data
Returns (Boolean) whether the loading got started

system.newTimer(callback, time, loop, arg1, arg2, arg3, arg4)
Creates a new timer to call a function after a delay, once or continuously.
  callback (Function) The function to call
  time (Int) the number of milliseconds that the function call should be delayed by
  loop (Boolean) whether the function call should loop or happen only once (default false)
  arg1 (Object) 1st argument of the callback function (default nil)
  arg2 (Object) 2nd argument of the callback function (default nil)
  arg3 (Object) 3rd argument of the callback function (default nil)
  arg4 (Object) 4th argument of the callback function (default nil)
Returns (Int) the new timer id

system.removeTimer(timerId)
Destroys a timer.
  timerId (Int) the identifier of the timer to stop

system.saveFile(data, fileNumber)
Requests the saving of a data file (throttled to one per minute). The event eventFileSaved is triggered when the file get saved.
  data (String) the data to store in the file
  fileNumber (Int) the identifier (from 0 to 99) of the file to write the data in (default 0)
Returns (Boolean) whether the saving got started

system.savePlayerData(playerName, data)
Saves module data about a player. Please note that this data is per player and per Lua dev, so take care not to overwrite data from another one of your modules.
  playerName (String) the player about whom you want to save data
  data (String) the player data to save

tfm.exec.addBonus(type, x, y, id, angle, visible, targetPlayer)
Add defilante bonus.
  type (Int) Bonus type (see tfm.enum.bonus) (default 1)
  x (Int) X position. (default 0)
  y (Int) Y position. (default 0)
  id (Int) Identifier. (default 0)
  angle (Int) Angle (deg). (default 0)
  visible (Boolean) Make the bonus visible or not. (default true)
  targetPlayer (String) Send only to this specific player. (default nil)

tfm.exec.addConjuration(xPosition, yPosition, duration)
Adds conjuration to the map. Note: Grid coordinate are regular coordinate divided by 10 (as conjuration is a 10x10 pixel square).
  xPosition (Int) the horizontal grid coordinate of the conjuration
  yPosition (Int) the vertical grid coordinate of the conjuration
  duration (Int) the duration of the conjuration in milliseconds (default 10000)

tfm.exec.addImage(imageId, target, xPosition, yPosition, targetPlayer, scaleX, scaleY, rotation, alpha, anchorX, anchorY)
Displays an image on the map.
  imageId (String) the image identifier
  target (String) the game element to attach the image to
    - #mobileId
    - $playerName (on the mouse sprite)
    - %playerName (with the mouse sprite removed)
    - ?backgroundLayerDepth
    - _groundLayerDepth
    - !foregroundLayerDepth
    - &fixedLayerDepthBeforeLuaInterfaces
    - :fixedLayerDepthBehindLuaInterfaces
    - +physicObjectId
  xPosition (Int) the horizontal offset of the top-left corner of the image (0 being the middle of the game element) (default 0)
  yPosition (Int) the vertical offset of the top-left corner of the image (0 being the middle of the game element) (default 0)
  targetPlayer (String) the player who will see the image (if nil, applies to all players) (default nil)
  scaleX (Number) Image scale X (default 1)
  scaleY (Number) Image scale Y (default 1)
  rotation (Number) Image rotation in radian (default 0)
  alpha (Number) Image alpha (default 1)
  anchorX (Number) Image anchor X (0..1) (default 0)
  anchorY (Number) Image anchor Y (0..1) (default 0)
Returns (Int) the image identifier

tfm.exec.addJoint(id, ground1, ground2, jointDef)
Adds a joint between two physic objects. . Note: In map XML codes, you can also add a « lua="id" » property in a joint definition to be able to interact with it with LUA code.
  id (Int) the identifier of the joint
  ground1 (Int) the first ground the joint will affect
  ground2 (Int) the second ground the joint will affect
  jointDef (Table) the ground description
    - type (Int): 0 -> distance joint, 1 -> prismatic joint, 2 -> pulley joint, 3 -> revolute joint
    - point1 (String "x,y"): location of the ground1 anchor (default: the ground1's center)
    - point2 (String "x,y"): location of the ground2 anchor (default: the ground2's center), only used with distance and pulley joints
    - point3 (String "x,y"), point4 (String "x,y"): locations of the pulley's anchors, only used with pulley joints
    - frequency (Float), damping (Float): distance joints' frequency and damping ratio
    - axis (String "x,y"), angle (Int): prismatic joints' axis and angle
    - limit1 (Float), limit2 (Float), forceMotor (Float), speedMotor (Float): prismatic and revolute joints' translation/rotation limits and motors
    - ratio (Float): revolute joints' ratio
    - line (Int), color (Int), alpha (Float), foreground (Boolean): if none of these properties is defined, the joint won't be drawn

tfm.exec.addPhysicObject(id, xPosition, yPosition, bodyDef)
Spawns a ground.
  id (Int) the identifier of the physic object
  xPosition (Int) the horizontal coordinate of the center of the ground
  yPosition (Int) the vertical coordinate of the center of the ground
  bodyDef (Table) the ground description
    - type (Int), width (Int), height (Int), foreground (Boolean), friction (Float), restitution (Float), angle (Int), color (Int), miceCollision (Boolean), groundCollision (Boolean)
    - dynamic (Boolean), fixedRotation (Boolean), mass (Int), linearDamping (Float), angularDamping (Float) for dynamic grounds

tfm.exec.addShamanObject(objectType, xPosition, yPosition, angle, xSpeed, ySpeed, ghost, options)
Spawns a shaman object.
  objectType (Int) the type of the shaman object to spawn
  xPosition (Int) the horizontal position of the spawn
  yPosition (Int) the vertical position of the spawn
  angle (Int) the rotation angle of the object, in degrees (default 0)
  xSpeed (Int) the horizontal speed of the object (default 0)
  ySpeed (Int) the vertical speed of the object (default 0)
  ghost (Boolean) whether the spawned object should be transparent (default false)
  options (Table) fixedXSpeed (Number), fixedYSpeed (Number)
Returns (Int) the shaman object identifier

tfm.exec.attachBalloon(playerName, yes, color, transparent, speed)
Tie a player to a balloon.
  playerName (String) the player's nickname
  yes (Boolean) Attach or dettach the balloon. (default true)
  color (Int) Balloon color [1-4]. (default 1)
  transparent (Boolean) Make the balloon transparent. (default false)
  speed (Number) Balloon speed. (default 1)

tfm.exec.changePlayerSize(playerName, size)
Changes the size of a player.
  playerName (String) the player's nickname
  size (Number) the new size of the player (between 0.1 and 5) (default 1)

tfm.exec.chatMessage(message, playerName)
Displays a chat message.
  message (String) the chat message to display
  playerName (String) the player who will get the message (if nil, applies to all players) (default nil)

tfm.exec.disableAfkDeath(activate)
Deactivates the automatic afk death.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableAllShamanSkills(active)
Deactivates all shaman skills.
  active (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableAutoNewGame(activate)
Deactivates the automatic renewal of rounds.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableAutoScore(activate)
Deactivates the automatic scoring management.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableAutoShaman(activate)
Deactivates the automatic selection of shaman.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableAutoTimeLeft(activate)
Deactivates the automatic remaining time change to 20s (when the shaman dies for example).
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableDebugCommand(activate)
Disables the effects of the /debug command.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableMinimalistMode(activate)
Disables the minimalist mode.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disableMortCommand(activate)
Disables the /mort command.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.disablePhysicalConsumables(active)
Deactivates physical consumables (like in racing and bootcamp rooms).
  active (Boolean) whether the deactivation should be active (default true)

tfm.exec.disablePrespawnPreview(display)
Enables or disables the shaman objects prespawn preview.
  display (Boolean) whether the prespawn preview should not be displayed (default true)

tfm.exec.disableWatchCommand(activate)
Disables the effects of the /watch command.
  activate (Boolean) whether the deactivation should be active (default true)

tfm.exec.displayParticle(particleType, xPosition, yPosition, xSpeed, ySpeed, xAcceleration, yAcceleration, targetPlayer)
Displays a particle.
  particleType (Int) the kind of particle you want to display
  xPosition (Int) the horizontal coordinate of the particle
  yPosition (Int) the vertical coordinate of the particle
  xSpeed (Number) the horizontal speed of the particle (default 0)
  ySpeed (Number) the vertical speed of the particle (default 0)
  xAcceleration (Number) the horizontal acceleration of the particle (default 0)
  yAcceleration (Number) the vertical acceleration of the particle (default 0)
  targetPlayer (String) the player who should see the particle (if nil, applies to all players) (default nil)

tfm.exec.explosion(xPosition, yPosition, power, radius, miceOnly)
Throws an explosion.
  xPosition (Int) the horizontal coordinate of the center of the explosion
  yPosition (Int) the vertical coordinate of the center of the explosion
  power (Int) the maximum power of the explosion
  radius (Int) the explosion radius (players further away won't be affected)
  miceOnly (Boolean) whether the explosion should affect only mice, or objects too (default false)

tfm.exec.freezePlayer(playerName, freeze)
Froze a player.
  playerName (String) the player's nickname
  freeze (Boolean) Freeze or unfreeze (default true)

tfm.exec.getPlayerSync()
Get current player sync.

tfm.exec.giveCheese(playerName)
Gives the cheese to a player.
  playerName (String) the player who should get the cheese

tfm.exec.giveConsumables(playerName, consumableId, amount)
Gives consumables to the targeted player.
  playerName (String) the player to give the gift to
  consumableId (String) the consumable identifier
  amount (String) the amount of consumables to give (default "1")

tfm.exec.giveMeep(playerName, canMeep)
Gives the meep competence to a player, or removes it.
  playerName (String) the player's nickname
  canMeep (Boolean) whether the player should be able to meep (default true)

tfm.exec.giveTransformations(playerName, canTransform)
Gives the transformations to a player, or removes them.
  playerName (String) the player's nickname
  canTransform (Boolean) whether the player should be able to use transformations (default true)

tfm.exec.killPlayer(playerName)
Kills the selected player.
  playerName (String) the player to kill

tfm.exec.linkMice(playerName1, playerName2, linked)
Allows to link players like in soulmate maps.
  playerName1 (String) the first player's nickname
  playerName2 (String) the second player's nickname
  linked (Boolean) whether the two players should be linked (default true)

tfm.exec.lowerSyncDelay(playerName)
Lowers the synchronization delay of a player to 400ms max
  playerName (String) the player who should have a lower sync delay

tfm.exec.moveObject(objectId, xPosition, yPosition, positionOffset, xSpeed, ySpeed, speedOffset, angle, angleOffset)
Defines the speed and position of a shaman object.
  objectId (Int) the shaman object identifier
  xPosition (Int) the horizontal coordinate of the point where the object will be moved
  yPosition (Int) the vertical coordinate of the point where the object will be moved
  positionOffset (Boolean) whether the specified position is an offset to apply to the current one, or the absolute one (default false)
  xSpeed (Int) the horizontal coordinate of the speed to give to the object (default 0)
  ySpeed (Int) the vertical coordinate of the speed to give to the object (default 0)
  speedOffset (Boolean) whether the specified speed is an offset to apply to the current one, or the absolute one (default false)
  angle (Int) the angle of the the object (default 0)
  angleOffset (Boolean) whether the specified angle is an offset to apply to the current one, or the absolute one (default false)

tfm.exec.movePlayer(playerName, xPosition, yPosition, positionOffset, xSpeed, ySpeed, speedOffset)
Defines the speed and position of a player.
  playerName (String) the player to move
  xPosition (Int) the horizontal coordinate of the point where the player will be moved
  yPosition (Int) the vertical coordinate of the point where the player will be moved
  positionOffset (Boolean) whether the specified position an offset to apply to the current one, or the absolute one (default false)
  xSpeed (Int) the horizontal coordinate of the speed to give to the player (default 0)
  ySpeed (Int) the vertical coordinate of the speed to give to the player (default 0)
  speedOffset (Boolean) whether the specified speed an offset to apply to the current one, or the absolute one (default false)

tfm.exec.newGame(mapCode, flipped)
Starts a new game
  mapCode (String) the map code (default nil)
    - nil (a random map)
    - 6 (vanilla map)
    - @42583 (editor map)
    - #4 (perm category map)
    - anything beginning with '<' (xml map)
  flipped (Boolean) whether the map should be flipped (default nil (randomly mirrored in racing and bootcamp rooms, unless))

tfm.exec.playEmote(playerName, emoteId, emoteArg)
Makes a player do an emote.
  playerName (String) the player who should do the emote
  emoteId (Int) the emote to do
  emoteArg (String) the emote attribute (for the flag emote for example) (default nil)

tfm.exec.playerVictory(playerName)
Makes a player enter the hole. It only works if the player already has a cheese!
  playerName (String) the player who should win

tfm.exec.removeBonus(id, targetPlayer)
Remove a defilante bonus.
  id (Int) Identifier. (default 0)
  targetPlayer (String) Send only to this specific player. (default nil)

tfm.exec.removeCheese(playerName)
Takes away the cheese from a player.
  playerName (String) the player who should get their cheese removed

tfm.exec.removeImage(imageId)
Removes an image.
  imageId (Int) the image identifier

tfm.exec.removeJoint(id)
Removes a joint from the game.
  id (Int) the identifier of the joint to remove

tfm.exec.removeObject(objectId)
Removes a shaman object.
  objectId (Int) the shaman object identifier

tfm.exec.removePhysicObject(id)
Removes a ground from the game.
  id (Int) the identifier of the ground to remove

tfm.exec.respawnPlayer(playerName)
Respawns a player.
  playerName (String) the player to respawn

tfm.exec.setAutoMapFlipMode(flipped)
Sets whether the following maps should be flipped (always, never, or TFM's default behaviour).
  flipped (Boolean) whether the maps should be flipped (default nil (the default TFM behaviour))

tfm.exec.setGameTime(time, init)
Sets the game remaining time.
  time (Int) the remaining time in seconds
  init (Boolean) whether the remaining time should change even if the specified remaining time is higher than the current one (default true)

tfm.exec.setNameColor(playerName, color)
Changes a player's nickname's color.
  playerName (String) the player whose nickname  should be colored
  color (Int) the color of the nickname

tfm.exec.setPlayerScore(playerName, score, add)
Sets the player's score.
  playerName (String) the player who should get his or her score changed
  score (Int) the score
  add (Boolean) whether the current score should be added to the specified one (default false)

tfm.exec.setPlayerSync(playerName)
Set current player sync.
  playerName (String) Target player name (Nil to let the server decide).

tfm.exec.setRoomMaxPlayers(maxPlayers)
Sets the max number of players in a room.
  maxPlayers (Int) the maximum number of players the room can hold

tfm.exec.setRoomPassword(password)
Password-protects a room.
  password (String) the string to set as the password (an empty string removes the protection)

tfm.exec.setShaman(playerName, makeAShaman)
Makes a player a shaman.
  playerName (String) the player who should become a shaman
  makeAShaman (Boolean) whether the player should be a shaman (default true)

tfm.exec.setShamanMode(playerName, mode)
Changes the shaman mode of a player.
  playerName (String) the player's nickname who will have another shaman mode
  mode (Int) the new shaman mode of the target (use nil to use the player's real mode) (default nil)

tfm.exec.setVampirePlayer(playerName, makeAVampire)
Makes a player a vampire.
  playerName (String) the player to make a vampire
  makeAVampire (Boolean) whether the player should be a vampire (default true)

tfm.exec.setWorldGravity(x, y)
Set the world gravity.
  x (Int) Gravity on x axis. (default 0)
  y (Int) Gravity on y axis (default 10)

tfm.exec.snow(duration, snowballPower)
Makes the snow fall.
  duration (Int) the snowfall duration in seconds (default 60)
  snowballPower (Int)  (default 10)

ui.addPopup(id, type, text, targetPlayer, x, y, width, fixedPos)
Displays a popup.
  id (Int) the identifier of the popup
  type (Int) the popup type (0 for simple, 1 for yes or no, 2 for player input)
  text (String) the text to display
  targetPlayer (String) the player who will see the popup (if nil, applies to all players)
  x (Int) the horizontal coordinate of the top-left corner (default 50)
  y (Int) the vertical coordinate of the top-left corner (default 50)
  width (Int) the width in pixels of the popup (if 0, it will be ajusted to the text width) (default 0)
  fixedPos (Boolean) whether the position is fixed or if it should follow the player's camera on long maps (default false)

ui.addTextArea(id, text, targetPlayer, x, y, width, height, backgroundColor, borderColor, backgroundAlpha, fixedPos)
Displays a text area.
  id (Int) the identifier of the text area
  text (String) the text to display
  targetPlayer (String) the player who will see the text area (if nil, applies to all players) (default nil)
  x (Int) the horizontal coordinate of the top-left corner (default 50)
  y (Int) the vertical coordinate of the top-left corner (default 50)
  width (Int) the width in pixels of the text area (if 0, it will be ajusted to the text width) (default 0)
  height (Int) the height in pixels of the text area (if 0, it will be ajusted to the text height) (default 0)
  backgroundColor (Int) the background color of the text area (default 0x324650)
  borderColor (Int) the border color of the text area (default 0)
  backgroundAlpha (Number) the background's opacity, from 0 (transparent) to 1 (opaque) (default 1)
  fixedPos (Boolean) whether the position is fixed or if it should follow the player's camera on long maps (default false)

ui.removeTextArea(id, targetPlayer)
Removes a text area.
  id (Int) the identifier of the text area
  targetPlayer (String) the player whom the text area will disappear (if nil, applies to all players) (default nil)

ui.setMapName(text)
Sets the map name.
  text (String) the text to display as the map name

ui.setShamanName(text)
Sets the shaman name.
  text (String) the text to display as the shaman name

ui.showColorPicker(id, targetPlayer, defaultColor, title)
Displays a color picker.
  id (Int) the identifier of the color picker
  targetPlayer (String) the player who will see the color picker (if nil, applies to all players) (default nil)
  defaultColor (Int) the default color on the color picker (default 0)
  title (String) the title of the color picker (default nil)

ui.updateTextArea(id, text, targetPlayer)
Updates the content of a text area.
  id (Int) the identifier of the text area
  text (String) the new text to display
  targetPlayer (String) the player who will get displayed the new text (if nil, applies to all players) (default nil)

